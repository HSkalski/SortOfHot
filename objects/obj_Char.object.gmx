<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Char</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Player
dir=0;
hspd = 0;
vspd = 0;
spd = 4;
shot_delay = 200;
vari = 1;
turnSpd=15
alarm[0] = 0;
speedTime = 0.01;
slowTime = 0.05;
hasReloaded = false;
prevDir = 0;
deltaR = 0;
rTime = 0.004;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bullet delay alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Movement


hspd = (keyboard_check(ord('D')) - keyboard_check(ord('A')))*spd*global.timeMultiplier;
vspd = (keyboard_check(ord('S')) - keyboard_check(ord('W')))*spd*global.timeMultiplier;

dir = point_direction(x,y,mouse_x,mouse_y);

fire = (mouse_check_button(mb_left) &amp;&amp; alarm[0] &lt;=0);

//Alarm Compensation
alarm[0] = alarm[0]  -  ( 5 * global.timeMultiplier ) ;
//if(alarm[0] &gt; shot_delay) { alarm[0] = shot_delay; }
if(alarm[0] &lt; 0) { alarm[0] = 0; }

//Rotation Time Scaling
//deltaR = abs(dir - prevDir);
//prevDir=dir;
//global.timeMultiplier+= deltaR*rTime;



//A=dir-image_angle;
//A=((A+180) mod 360) - 180;
//if(A &gt; 0){image_angle+=turnSpd*global.timeMultiplier;}
//else if(A &lt; 0){image_angle-=turnSpd*global.timeMultiplier;}
//else{image_angle = dir};

//if(image_angle &gt; dir){image_angle-=turnSpd*global.timeMultiplier;}
//if(image_angle &lt; dir){image_angle+=turnSpd*global.timeMultiplier;}
//Collisions

//Collision Y

if(place_meeting(x,y+vspd,obj_Solid)){
    while(!place_meeting(x,y+sign(vspd),obj_Solid)){ y += sign(vspd); }
}
else y+=vspd;

//collision X

if(place_meeting(x+hspd,y,obj_Solid)){
    while(!place_meeting(x+sign(hspd),y,obj_Solid)){ x += sign(hspd); }   
}
else x+=hspd;

// Time Scaling

if(hspd != 0 || vspd != 0) {global.timeMultiplier+= speedTime;}
else {global.timeMultiplier-=slowTime;}


//Reload sound
if(hasReloaded==false &amp;&amp; alarm[0]&lt;=0){
    
    
    hasReloaded = true;
}

//Bullet Firing

if (fire) {
    // Reset the alarm
    alarm[0] = shot_delay;
    hasReloaded = false;
    // Shoot
    audio_play_sound(snd_gunShot, 10, false);
    
    tempX = lengthdir_x(18,dir);
    tempY = lengthdir_y(18,dir);
    abc=instance_create(tempX+x,tempY+y,obj_Bullet)
    abc.direction=dir;
    
    
}




/*
dir = point_direction(x, y, mouse_x, mouse_y);
fire = (mouse_check_button(mb_left) &amp;&amp; alarm[0] &lt;= 0);

//Player Movement
hspeed = 3 * (keyboard_check(ord('D')) - keyboard_check(ord('A')));
vspeed = 3 * (keyboard_check(ord('S')) - keyboard_check(ord('W')));

//Rotate Player
image_angle=dir;

//Shooting 

if(fire) {
    //Reset alarm
    alarm[0] = shot_delay;
    
    //Find Target
    abc=instance_create(x,y,obj_Bullet)
    abc.speed=10
    abc.direction=dir;
}

//Collisions

if hspeed!=0
if !place_free(x+hspeed,y)
{
    if hspeed&gt;0 move_contact_solid(0,hspeed)
    if hspeed&lt;0 move_contact_solid(180,-hspeed)
    hspeed=0
}

if vspeed!=0
if !place_free(x+hspeed,y+vspeed)
{
    if vspeed&gt;0 move_contact_solid(270,vspeed)
    if vspeed&lt;0 move_contact_solid(90,-vspeed)
    vspeed=0
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemyBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw player and gun

draw_sprite_ext(spr_Gun, 0, x, y, 1, 1, dir, c_white, 1);
draw_sprite_ext(spr_Char, 0, x, y, 1, 1, dir, c_white, 1);

draw_set_color(c_green)
draw_text(x+5,y+5, alarm[0]);
draw_text(x+5,y+20, global.timeMultiplier);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
